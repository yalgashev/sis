version: '3.8'

services:
  # PostgreSQL Database (starts first)
  db:
    image: postgres:15-alpine
    container_name: sis_database
    env_file:
      - ./.env
    environment:
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_init:/docker-entrypoint-initdb.d  # For database initialization
    networks:
      - sis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sis"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  # Django Web Application
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: sis_web
    ports:
      - "80:8000"  # Map to port 80 for web access
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    volumes:
      - media_files:/app/media        # Persistent media files
      - static_files:/app/staticfiles # Static files (collected)
      - ./logs:/app/logs             # Application logs
    networks:
      - sis-network
    restart: unless-stopped
    
  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: sis_nginx
    ports:
      - "443:443"  # HTTPS
      - "8080:80"  # HTTP alternative port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates
      - static_files:/var/www/staticfiles:ro
      - media_files:/var/www/media:ro
    depends_on:
      - web
    networks:
      - sis-network
    restart: unless-stopped
    
  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: sis_redis
    env_file:
      - ./.env
    volumes:
      - redis_data:/data
    networks:
      - sis-network
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  sis-network:
    driver: bridge
